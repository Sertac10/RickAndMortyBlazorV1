@* @using RickAndMortyBlazorV1.Dto
@using RickAndMortyBlazorV1.Models

@typeparam TItem
  <section class="wrapper">
    @foreach (var item in Items)
    {
          
        <button class="card-btn card" @onclick="@(() => OnClick.InvokeAsync(item))">
            <div class="card-content card__label">
                 <Animate Animation="Animations.ZoomOutDown" Duration="TimeSpan.FromSeconds(0.3)">

                    <img class="card__image-container" src="@ImageSelector(item)" alt="character" />
                    

                 </Animate>
                <h5 class="card__name">@NameSelector(item)</h5>
                 <h2>@StatusSelector(item)</h2> 
            </div>
        </button>  
    }
    @if (Items.Count == 0)
    {
         <Animate Animation="Animations.ZoomOutDown" Duration="TimeSpan.FromSeconds(0.2)" Delay="TimeSpan.FromSeconds(2)">
        <p>Nothing Found</p>
        </Animate> 
    }
</section> 

@code{
    [Parameter] public List<TItem> Items { get; set; } = new();
    [Parameter] public EventCallback<TItem> OnClick { get; set; }
    [Parameter] public TItem characterId { get; set; }
    [Parameter] public Func<TItem, string> StatusSelector { get; set; }
    [Parameter] public Func<TItem, int> ItemIdSelector { get; set; }
    [Parameter] public Func<TItem, string> NameSelector { get; set; }
    [Parameter] public Func<TItem, string> ImageSelector { get; set; }
} 

 *@

@inject RickAndMortyBlazorV1.Service.IRickAndMortyService rickMortyApi
@typeparam TItem


<div class="wrapbox">
    <div class="innerbox">
        @foreach (TItem character in Items)
        {

            <div class="Card">
                <div class="CardImage">
                    <img class="CardImage" src="@ImageSelector(character)" />
                </div>
                <div class="CardContent">

                    <div class="CardSection">
                        <a @onclick="@(() => OnClick.InvokeAsync(character))">
                            <h2 style="margin-bottom:0;">
                                @NameSelector(character)
                            </h2>
                        </a>
                        <span class="status" style="font-weight:500;">
                            <span class="icon" style="background-color:@GetStatusColor(StatusSelector(character))" />
                            @StatusSelector(character) - @SpeciesSelector(character)
                        </span>
                    </div>
                    <div class="CardSection mtop">
                        <span class="text-gray">Last known location:</span>
                        <a>
                            @LocationSelector(character)
                        </a>
                    </div>
                    <div class="CardSection mtop">
                        <span class="text-gray">First seen in:</span>
                        @{
                            int episodeId = int.Parse(EpisodeSelector(character).Split('/').Last());
                            Episode? episode = _episodes.Find(episode => episode.Id == episodeId);
                            <a>@episode?.Name</a>
                        }

                    </div>

                </div>

            </div>
        }
    </div>
</div>

@code {
    [Parameter] public List<TItem> Items { get; set; } = new();
    [Parameter] public EventCallback<TItem> OnClick { get; set; }
    [Parameter] public TItem? characterId { get; set; }
    [Parameter] public Func<TItem, string> StatusSelector { get; set; } = null!;
    [Parameter] public Func<TItem, int> ItemIdSelector { get; set; } = null!;
    [Parameter] public Func<TItem, string> NameSelector { get; set; } = null!;
    [Parameter] public Func<TItem, string> ImageSelector { get; set; } = null!;
    [Parameter] public Func<TItem, string> LocationSelector { get; set; } = null!;
    [Parameter] public Func<TItem, string> EpisodeSelector { get; set; } = null!;
    [Parameter] public Func<TItem, string> SpeciesSelector { get; set; } = null!;
    [Parameter] public List<Episode> _episodes { get; set; } = new();

    private string GetStatusColor(string status)
    {
        return status switch
        {
            "Alive" => "green",
            "Unknown" => "grey",
            "Dead" => "red",
            _ => "black"
        };
    }

}
